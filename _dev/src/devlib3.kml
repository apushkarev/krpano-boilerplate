<krpano>

  <this />

  /* requires caller object */
  <action name="getThis">
  
    copy(this, calc(_type + '[' + name + ']'));

  </action>

  <action name="arrayPush" type="javascript"><![CDATA[

    const [f, arrayName, arrayItemName] = args;

    krpano.set(`${arrayName}[${arrayItemName}].name`, arrayItemName);
    
  ]]></action>

  <action name="getKRPano" type="javascript"><![CDATA[
    window.krpano = krpano; 
  ]]></action>

  <action name="removeArray">

    if (%1,
      for(calc(i, %1.count - 1), i GE 0, dec(i),
        %1.removearrayitem(get(i));
      );
    );
    
  </action>
  
  <prototype name="InvisibleContent"
    visible="false" alpha="0"

    showBefore=""
    showPrecall=""
    showAfter=""
    showFastPrecall=""

    hidePrecall=""
    hideBefore=""
    hideAfter=""
    hideFastPrecall=""

    tweenDuration="0.25"
    targetAlpha="1"
    tweenType="default"

    allowShowing="true"
    allowHiding="true"

    isShowing="false"
    isHiding="false"

    showDelay="0"
    hideDelay="0"

    show="
      showPrecall();

      if (allowShowing,
        abortTween();
        if (!visible,
          delayedcall(get(name), get(showDelay),
            set(visible, true);
            showBefore();
            set(isShowing, true);
            tween(alpha, get(targetAlpha), get(tweenDuration), get(tweenType),
              set(isShowing, false);
              showAfter();
            );
          );
        );
      );
    "
    hide="
      hidePrecall();

      if (allowHiding,
        abortTween();
        if (visible,
          delayedcall(get(name), get(hideDelay),
            hideBefore();
            set(isHiding, true);
            tween(alpha, 0, get(tweenDuration), get(tweenType),
              set(visible, false);
              set(isHiding, false);
              hideAfter();
            );
          );  
        );
      );
    "
    abortTween="
      
      if (isShowing,
        stoptween(alpha);
        set(isShowing, false);

        set(alpha, 0);
        set(visible, false);
      );

      if (isHiding,
        stoptween(alpha);
        set(isHiding, false);
        copy(alpha, targetAlpha);
        set(visible, true);
      );
    "
    showFast="
      showFastPrecall();
      if (allowShowing,
        abortTween();
        showBefore();
        ifnot(visible,
          set(visible, true);
          copy(alpha, targetAlpha);
          showAfter();
        ,
          set(tween_in_progress, false);
        );
      );
    "
    hideFast="
      hideFastPrecall();
      abortTween();
      if (visible AND allowHiding,
        hideBefore();
        set(visible, false);
        set(alpha, 0);
        hideAfter();
      ,
        set(tween_in_progress, false);
      );
    "
    updateAlpha="
      if (visible AND alpha != targetAlpha,
        tween(alpha, get(targetAlpha), get(tweenDuration), get(tweenType));
      );
    "
  />

  <style name="Visible"
    visible="true" alpha="1"
  />  

  <action name="new" type="javascript"><![CDATA[

    const [f, className, name, ...params] = args;

    const classArray = className.split('|');
    let constructorClass = '';

    for (let i = 0; i < classArray.length; i++) {
      if (classArray[i] != 'visible' && krpano.get(`style[${classArray[i]}].${classArray[i]}`)) {
        constructorClass = classArray[i];
      }
    }

    if (caller) {
      krpano.call(`
        copy(parent, ${caller._type}[${caller.name}]);
      `);
    }
    
    krpano.call(`style[${constructorClass}].${constructorClass}(${name}, ${className}, ${params.join(', ')});`);

  ]]></action>

  <action name="newhotspot">
  
    addhotspot(%1, this);
    this.loadstyle(%2);
    
  </action>

  <action name="newlayer">
  
    addlayer(%1, this);
    this.loadstyle(%2);
    
  </action>

  <!-- 
    %1 – flag
    %2 – call
  -->
  <action name="asynccall">
    asyncloop( %1, ,
      %2
    );
  </action>


  <style name="reliable_width"
    width_available="false" 
    onloaded="
      onloaded_override();
      asynccall(width == 0 OR width == null,
        onwidth();
        set(width_available, true);
      );
    "
    onwidth=""
    onloaded_override=""
  />

  <style name="reliable_height"
    height_available="false" 
    onloaded="
      onloaded_override();
      asynccall(height == 0 OR height == null,
        onheight();
        set(height_available, true);
      );
    "
    onheight=""
    onloaded_override=""
  />

  <console
    line_no="0"
    log="
      if (%1 OR %1 == 0 OR %1 == false,
        trace(get(console.line_no), ' | name: ', get(name), ' ::  ', calc(%1)); 
      , %1 == NaN,
        trace(get(console.line_no), ' | name: ', get(name), ' ::  %1 = NaN'); 
      , %1 == null,
        trace(get(console.line_no), ' | name: ', get(name), ' ::  %1 = null'); 
      , %1 == '',
        trace(get(console.line_no), ' | name: ', get(name), ' ::  empty string'); 
      );

      inc(console.line_no);

      showlog();
    "
    divider="
      trace('----------------------------------------------------');
    "
    msg="
      trace(get(console.line_no), ' | ', %1); 
      inc(console.line_no);
      showlog();
    "
    var_name=""
    var="
      set(var_name, %1);
      if ( %1 OR %1 == 0,
        trace(get(console.line_no), ' | name: ', get(name), ' :: ', var_name, ' = ', calc(%1)); 

      , %1 === null,
        trace(get(console.line_no), ' | name: ', get(name), ' ::  ', var_name, ' = null'); 
        
      , %1 === NaN,
        trace(get(console.line_no), ' | name: ', get(name), ' ::  ', var_name, ' = NaN'); 
      );
      inc(console.line_no);

      showlog();
    "
  />

  <style name="dragging_hotspot"
    init_ath="0"
    init_atv="0"

    ondown="
      screentosphere(mouse.x, mouse.y, mouse_init_ath, mouse_init_atv);
      copy(init_ath, ath);
      copy(init_atv, atv);

      dragging();
    "
    dragging_hotspot="true"
    onup="
      log_hs_xml();
    "

    dragging="
      if(pressed, 

        screentosphere(mouse.x, mouse.y, mouse_ath, mouse_atv);

        calc(new_ath, init_ath + mouse_ath - mouse_init_ath);
        calc(new_atv, init_atv + mouse_atv - mouse_init_atv);

        mul(temp, new_ath, 20);
        math.round(temp);
        div(ath, temp, 20);

        mul(temp, new_atv, 20);
        math.round(temp);
        div(atv, temp, 20);

        if (get_projection_rotate,
          get_projection_rotate();
        );

        delayedcall(0, dragging()); 
      );
    "
    str=""
    log_hs_xml="

      math.abs(temp, ath);
      div(sign, temp, ath);
      div(whole, temp, 360);

      if (whole GT 1,
        math.floor(whole);
        calc(temp, sign * (temp - whole * 360));
        copy(ath, temp);
      );

      mul(temp, ath, 100);
      math.round(temp);
      div(ath, temp, 100);

      mul(temp, atv, 100);
      math.round(temp);
      div(atv, temp, 100);

      txtadd(str, '&lt;hotspot name=&quot;', get(name), '&quot; ',
          'style=&quot;', get(style), '&quot; ',
          'ath=&quot;', get(ath), '&quot; ',
          'atv=&quot;', get(atv), '&quot; ',
          'html=&quot;1&quot;/&gt;'
        );
      prompt(get(name), get(str));
    "
  />

  <action name="prompt" type="javascript"><![CDATA[

    var code = prompt(args[1], args[2]);

  ]]></action>

  <!--
    
    %1 - interval name
    %2 - delay
    %3 - count
    %4 - callback action taking counter value as argument
    
  -->
  <action name="interval_calls">

    def(%1_counter, number, 0);
    def(t0, number, 0);
  
    setinterval(%1, %2, 
      copy(t0, timertick);
      scope(global, %4(get(%1_counter)));


      inc(%1_counter);
      
      if (%1_counter == %3,
        clearinterval(%1);
      );
    );
    
  </action>

</krpano>