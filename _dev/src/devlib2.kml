 <krpano
 	ctrl="false"
 	total_interval_calls="0"
 	interval_calls_total_time="0"
 >

	<_
		tween_duration="0.2"
		default_hotspot_style=""
		alt_flag="false"
		response="0"
	/>
	
	<hotspot name="hs0" keep="true" />

	/* requires caller object */
  <action name="get_this">
  
    copy(this, calc(_type + '[' + name + ']'));

  </action>
	
	<style name="invisible_content"
		visible="false" alpha="0"

		show_before=""
		show_precall=""
		show_after=""
		show_fast_precall=""

		hide_precall=""
		hide_before=""
		hide_after=""
		hide_fast_precall=""

		tween_duration="0.25"
		target_alpha="1"
		tween_type="default"

		allow_showing="true"
		allow_hiding="true"

		lx="0" ly="0" sx="0" sy="0"

		tween_in_progress="false"

		show_delay="0"
		hide_delay="0"

		show="
			show_precall();
			if (allow_showing AND !visible,

				stop_tween();

				delayedcall(get(name), get(show_delay),
					set(visible, true);
					show_before();
					set(tween_in_progress, true);
					tween(alpha, get(target_alpha), get(tween_duration), get(tween_type),
						set(tween_in_progress, false);
						show_after();
					);
				);
			);
		"
		hide="

			hide_precall();
			if (visible AND allow_hiding,

				stop_tween();

				delayedcall(get(name), get(hide_delay),
					hide_before();
					set(tween_in_progress, true);
					tween(alpha, 0, get(tween_duration), get(tween_type),
						set(visible, false);
						set(tween_in_progress, false);
						hide_after();
					);
				);	
			);
		"
		stop_tween="
			if (tween_in_progress,
				stoptween(alpha);
			);
		"
		show_fast="
			show_fast_precall();
			if (allow_showing,
				ifnot(visible,
					show_before();
					set(visible, true);
				,
					stop_tween();
					set(tween_in_progress, false);
				);
				copy(alpha, target_alpha);
				show_after();
			);
		"
		hide_fast="
			hide_fast_precall();
			if (visible AND allow_hiding,
				stop_tween();

				hide_before();
				
				set(tween_in_progress, false);

				set(visible, false);
				set(alpha, 0);
				hide_after();
			);
		"
		update_alpha="
      if (visible AND alpha != target_alpha,
        tween(alpha, get(target_alpha), get(tween_duration), get(tween_type));
      );
    "
	/>

	
	<style name="visible"
		visible="true" alpha="1"
	/>

	<action name="new" type="javascript"><![CDATA[

	  const [f, className, name, ...params] = args;

	  const classArray = className.split('|');
	  let constructorClass = '';

	  for (let i = 0; i < classArray.length; i++) {

	    if (classArray[i] != 'visible' && krpano.get(`style[${classArray[i]}].${classArray[i]}`)) {
	      constructorClass = classArray[i];
	    }
	  }

	  if (caller) {
		  krpano.call(`
		    copy(parent, ${caller._type}[${caller.name}]);
		  `);
	  }
	  
	  krpano.call(`style[${constructorClass}].${constructorClass}(${name}, ${className}, ${params.join(', ')});`);

	]]></action>

	<action name="newhotspot">
	
	  addhotspot(%1, this);
	  this.loadstyle(%2);
	  
	</action>

	<action name="newlayer">
	
	  addlayer(%1, this);
	  this.loadstyle(%2);
	  
	</action>

	<action name="newplugin">
	
		addplugin(%1, this);
		this.loadstyle(%2);
		
	</action>

	<!--
		
		%1 - interval name
		%2 - delay
		%3 - count
		%4 - callback action taking counter value as argument
		
	-->
	<action name="interval_calls">

		def(%1_counter, number, 0);
		def(t0, number, 0);


		setinterval(%1, %2, 
			copy(t0, timertick);
			scope(global, %4(get(%1_counter)));

			inc(%1_counter);

			if (%1_counter == %3,
				clearinterval(%1);
			);
		);
		
	</action>

<!-- 	<action name="interval_calls">
	
		def(%1_counter, number, 0);

		for(set(%1_counter, 0), %1_counter LT %3, inc(%1_counter),
			scope(global, %4(get(%1_counter)));
		);
		
	</action> -->

	<style name="dragging_hotspot"
		init_ath="0"
		init_atv="0"

		ondown="
			screentosphere(mouse.x, mouse.y, mouse_init_ath, mouse_init_atv);
			copy(init_ath, ath);
			copy(init_atv, atv);

			dragging();
		"
		is_draggable="true"
		onup="
			log_hs_xml();
		"

		dragging="
			if(pressed, 

				screentosphere(mouse.x, mouse.y, mouse_ath, mouse_atv);

				calc(new_ath, init_ath + mouse_ath - mouse_init_ath);
				calc(new_atv, init_atv + mouse_atv - mouse_init_atv);

				mul(temp, new_ath, 20);
				math.round(temp);
				div(ath, temp, 20);

				mul(temp, new_atv, 20);
				math.round(temp);
				div(atv, temp, 20);

				delayedcall(0, dragging()); 
			);
		"
		str=""
		log_hs_xml="

			math.abs(temp, ath);
			div(sign, temp, ath);
			div(whole, temp, 360);

			if (whole GT 1,
				math.floor(whole);
				calc(temp, sign * (temp - whole * 360));
				copy(ath, temp);
			);

			mul(temp, ath, 100);
			math.round(temp);
			div(ath, temp, 100);

			mul(temp, atv, 100);
			math.round(temp);
			div(atv, temp, 100);

			calc(str, 'ath=&quot;' + ath + '&quot; atv=&quot;' + atv + '&quot;');

			/* txtadd(str, '&lt;hotspot name=&quot;', get(name), '&quot; ',
					'style=&quot;', get(style), '&quot; ',
					'ath=&quot;', get(ath), '&quot; ',
					'atv=&quot;', get(atv), '&quot; ',
					'html=&quot;1&quot;/&gt;'
				); */
			prompt(get(name), get(str));
		"
	/>


	<style name="dragging_layer"

		init_x="0"
		init_y="0"

		coords_transformed="false"
		transform_percent_coords="
			if (parent,
				txtsplit(x, '%', xs_arr);
				txtsplit(y, '%', ys_arr);

				calc(x, xs_arr[0].value / 100 * layer[get(parent)].pixelwidth);
				calc(y, ys_arr[0].value / 100 * layer[get(parent)].pixelheight);

				set(coords_transformed, true);
			);
		"

		ondown="
			transform_percent_coords();

			copy(mouse_init_x, mouse.x);
			copy(mouse_init_y, mouse.y);
		
			copy(init_x, x);
			copy(init_y, y);
			
			dragging();
		"

		onup="
			log();
		"
		log="
			if (parent,

				calc(new_x, new_x / layer[get(parent)].pixelwidth * 10000);
				math.round(new_x);
				div(new_x, 100);

				calc(new_y, new_y / layer[get(parent)].pixelheight * 10000);
				math.round(new_y);
				div(new_y, 100);

				txtadd(  '&lt;layer name=&quot;', get(name), '&quot; ',
						' style=&quot;', get(style), '&quot; ',
						' x=&quot;',  new_x, '%&quot;',
						' y=&quot;', new_y, '%&quot;',
						' parent=&quot;', get(parent), '&quot;',
						' keep=&quot;true&quot;',
						' linkedscene=&quot;paste_here&quot;/&gt;'
					);
				show_coords_js(get(name), calc(new_x + '%'), calc(new_y + '%'));
			,
				trace(  ' x=&quot;', x, '%&quot;',
						' y=&quot;', y, '%&quot;'
					);
			);
		"
		dragging="
			if(pressed, 

				calc(new_x, init_x + mouse.x - mouse_init_x);
				calc(new_y, init_y + mouse.y - mouse_init_y);

				calc(xs, new_x / layer[get(parent)].pixelwidth);
				calc(ys, new_y / layer[get(parent)].pixelheight);

				txtadd(x, calc(new_x / layer[get(parent)].pixelwidth * 100), '%');
				txtadd(y, calc(new_y / layer[get(parent)].pixelheight * 100), '%');

				delayedcall(0, dragging()); 
			);
		"
	/>

	<action name="show_coords_js" type="javascript"><![CDATA[

		prompt(args[1], `x="${args[2]}" y="${args[3]}"`);

	]]></action>

	<action name="show_pano_pov" type="javascript"><![CDATA[

		prompt(args[1], `ath="${args[2]}" atv="${args[3]}" fov="${args[4]}" scene="${args[5]}"`);

	]]></action>

	<action name="prompt" type="javascript"><![CDATA[

		var code = prompt(args[1], args[2]);

	]]></action>

	<action name="prompt_call" type="javascript"><![CDATA[

		var code = prompt(args[1], args[2]);
		krpano.set('_.response', code);
		krpano.call('ondoubleclick_actions();');

	]]></action>

	<style name="inheritance"

		onover=""
		onhover=""
		onout=""
		onclick=""
		ondown=""
		onup=""

		i="0"
		val=""

		onloaded="
			txtsplit(get(style), '|', parent_class);

			for (set(i, 0), i LT parent_class.count, inc(i),

				if (get(parent_class[get(i)].value),
					
					scope(parent, get(parent_class[get(i)].value));

					calc_event('onover');
					calc_event('onhover');
					calc_event('onout');
					calc_event('onclick');
					calc_event('ondown');
					calc_event('onup');
				);
			);
		"
	/>

	<action name="calc_event">

		calc(val, parent_class[get(i)].value + '_%1');

		if (get(val),
			txtadd( %1, get( %1), get(val), '(); ');
		);

	</action>

	<!-- 
		%1 – flag
		%2 – call
	-->
	<action name="asynccall">
		asyncloop( %1, ,
			%2
		);
	</action>

	<!--
		%1 - object parameter
		%2 - db object
		%3 - field name
	-->
	<action name="get_db_field">
	
		copy( %1, %2.%3);

	</action>

	<action name="set_db_field">

		set( %1.%2, %3);

	</action>

	<!--
		%1 - field to write
		%2 - table name
	-->
	<action name="get_table_size">

		copy( %1, %2.count);

	</action>

	<style name="reliable_width"
		width_available="false" 
		onloaded="
			onloaded_override();
			asynccall(width == 0 OR width == null,
				onwidth();
				set(width_available, true);
			);
		"
		onwidth=""
		onloaded_override=""
	/>

	<console
		line_no="0"
		log="
			if (%1 OR %1 == 0 OR %1 == false,
				trace(get(console.line_no), ' | name: ', get(name), ' ::  ', calc(%1)); 
			, %1 == NaN,
				trace(get(console.line_no), ' | name: ', get(name), ' ::  %1 = NaN'); 
			, %1 == null,
				trace(get(console.line_no), ' | name: ', get(name), ' ::  %1 = null'); 
			, %1 == '',
				trace(get(console.line_no), ' | name: ', get(name), ' ::  empty string'); 
			);

			inc(console.line_no);

			showlog();
		"
		divider="
			trace('----------------------------------------------------');
		"
		msg="
			trace(get(console.line_no), ' | ', %1); 
			inc(console.line_no);
			showlog();
		"
		var_name=""
		var="
			set(var_name, %1);
			if ( %1 OR %1 == 0,
				trace(get(console.line_no), ' | name: ', get(name), ' :: ', var_name, ' = ', calc(%1)); 

			, %1 === null,
				trace(get(console.line_no), ' | name: ', get(name), ' ::  ', var_name, ' = null'); 
				
			, %1 === NaN,
				trace(get(console.line_no), ' | name: ', get(name), ' ::  ', var_name, ' = NaN'); 
			);
			inc(console.line_no);

			showlog();
		"
	/>

	<events name="debug" keep="true"

		onnewpano="
			if (_.deeplinking,
				skin_deeplinking_update_url();
			);
		"
		onidle="
			if (_.deeplinking,
				skin_deeplinking_update_url();
			);
		"

		ondoubleclick="
			if (_.devmode, 

				prompt_call('Write something', '');

			,
				set(events[debug].ondoubleclick, '');
			);
		"

		onkeyup="
			if (keycode == 65 AND _.devmode,
				set(view.fovmax, 140);
				set(view.architectural, 1);
				set(view.fov, 120);
			);

			if (keycode == 66 AND _.devmode,
				set(view.vlookat, 0);
			);

			if (keycode == 83 AND _.devmode,
				makescreenshot(240, 160, 'thumb');
			);
		"
	/>

	<action name="ondoubleclick_actions">

		calc(_.hs_count, hotspot.count + 1);

		calc(hs_name, 'spot' + _.hs_count);

		addhotspot(get(hs_name));
		copy(hs, hotspot[get(hs_name)]);

		hs.loadstyle(dragging_hotspot);
		hs.loadstyle(calc(_.default_hotspot_style + '|invisible_content|visible'));
		set(hs.html, get(_.response));

		screentosphere(mouse.x, mouse.y, hs.ath, hs.atv);

		callwith(hs, log_hs_xml);

	</action>

	<action name="skin_nextscene" scope="local" args="indexadd">
		add(newsceneindex, scene[get(xml.scene)].index, indexadd);
		if(newsceneindex GE 0 AND newsceneindex LT scene.count,
			callwith(layer[get(scene[get(newsceneindex)].linked_mapspot)], onclick);
		);
	</action>

	<action name="skin_deeplinking_update_url" scope="local" args="delay">
		
		delayedcall(skin_deeplinking_update, 0.1, skin_deeplinking_update_url_process() );
		
	</action>

	<action name="skin_deeplinking_update_url_process" scope="local">
		copy(adr, browser.location);
		indexoftxt(qi, get(adr), '?');
		if(qi GT 0, subtxt(adr, adr, 0, get(qi)));
		copy(si, scene[get(xml.scene)].index);
		copy(h, view.hlookat);
		copy(v, view.vlookat);
		copy(f, view.fov);
		copy(d, view.distortion);
		copy(a, view.architectural);
		clamp(d, 0.0, 1.0);
		clamp(a, 0.0, 1.0);
		set(pp, calc(f LT 10 ? 6 : 2));
		roundval(h, get(pp));
		roundval(v, get(pp));
		roundval(f, get(pp));
		roundval(d, 2);
		roundval(a, 1);
		set(adr, calc(adr + '?startscene=' + si + '&amp;startactions=lookat('+h+','+v+','+f+','+d+','+a+');'));
		js( history.replaceState(null, document.title, get(adr)); );
	</action>

	<action name="deeplinking_load">

		if (_.deeplinking,
			copy(adr, browser.location);

			indexoftxt(qi, get(adr), '?');
			
			if (qi GT 0, 
				indexoftxt(strlen, get(adr), ';', get(qi));
				indexoftxt(qi, get(adr), '?');
				calc(strlen, strlen - qi);

				subtxt(args, get(adr), calc(qi + 1), calc(strlen));


				indexoftxt(qi, get(args), '&amp;');

				txtsplit(args, '&amp;', scene_name, _lookat);  


				txtsplit(scene_name, '=', ssv, scene_name);

				txtsplit(_lookat, '=', ssv, _lookat);


				if (scene_name == null OR  scene_name == NaN,
					copy(scene_name, _.startscene);
				);

				loadscene(get(scene_name), null, MERGE);
				delayedcall(0, get(_lookat));
			,
				loadscene(get(_.startscene), null, MERGE);
			);
		,
			loadscene(get(_.startscene), null, MERGE);
		);
	</action>

	<action name="get_referrer" type="javascript"><![CDATA[

		var isInIframe = (parent !== window),
			parentUrl = null;

		if (isInIframe) {
			parentUrl = document.referrer;
		}

		var krpano = document.getElementById('krpanoSWFObject');

		krpano.call('trace(' + parentUrl + ');');

	]]></action>

	<!--
		%1 - count
		%2 - id
		%3 - actions
	-->
	<action name="sequential_execution" scope="local">

		set(i, 0);
	
		setinterval(%3, 0.01,

			if (i GE %1,
				clearinterval(%2);
				break();
			);

			scope(local, %3);
			inc(i);
		);
		
	</action>

</krpano>